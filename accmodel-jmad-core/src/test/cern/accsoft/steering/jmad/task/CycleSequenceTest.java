// @formatter:off
 /*******************************************************************************
 *
 * This file is part of JMad.
 * 
 * Copyright (c) 2008-2011, CERN. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 ******************************************************************************/
// @formatter:on

package cern.accsoft.steering.jmad.task;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import cern.accsoft.steering.jmad.domain.machine.RangeDefinition;
import cern.accsoft.steering.jmad.domain.machine.RangeDefinitionImpl;
import cern.accsoft.steering.jmad.domain.machine.SequenceDefinition;
import cern.accsoft.steering.jmad.domain.machine.SequenceDefinitionImpl;
import cern.accsoft.steering.jmad.domain.twiss.TwissInitialConditionsImpl;
import cern.accsoft.steering.jmad.factory.BeamFactory;
import cern.accsoft.steering.jmad.kernel.task.AbstractTask;
import cern.accsoft.steering.jmad.kernel.task.CycleSequence;

public class CycleSequenceTest {

    private SequenceDefinition sequenceDefinition;
    private RangeDefinitionImpl rangeDefinition;

    @Before
    public void initRangeDefinition() {
        sequenceDefinition = new SequenceDefinitionImpl("testseq", BeamFactory.createDefaultLhcBeam());
        rangeDefinition = new RangeDefinitionImpl(sequenceDefinition, "ALL", new TwissInitialConditionsImpl());
    }

    @Test(expected = NullPointerException.class)
    public void testNoRange() {
        AbstractTask task = new CycleSequence(null);
        assertEquals("", task.compose());
    }

    @Test
    public void testNoStartElement() {
        AbstractTask task = new CycleSequence(this.rangeDefinition);
        assertEquals(
                "\n// ***** BEGIN autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****\n"
                        + "// ***** END autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****",
                task.compose());

    }

    @Test
    public void testValidStartElement() {
        this.rangeDefinition.setStartElementName("EXAMPLE.ELEMENT");
        AbstractTask task = new CycleSequence(this.rangeDefinition);
        assertEquals(
                "\n// ***** BEGIN autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****\n"
                        + "seqedit, sequence=testseq;\n" + "flatten;\n" + "cycle, start=EXAMPLE.ELEMENT;\n"
                        + "endedit;\n"
                        + "// ***** END autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****",
                task.compose());
    }
}
