// @formatter:off
 /*******************************************************************************
 *
 * This file is part of JMad.
 * 
 * Copyright (c) 2008-2011, CERN. All rights reserved.
 * 
 * JMad is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * JMad is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with JMad.  If not, see <http://www.gnu.org/licenses/>.
 * 
 ******************************************************************************/
// @formatter:on
package cern.accsoft.steering.jmad.task;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import cern.accsoft.steering.jmad.domain.machine.RangeDefinition;
import cern.accsoft.steering.jmad.domain.machine.RangeDefinitionImpl;
import cern.accsoft.steering.jmad.domain.machine.SequenceDefinition;
import cern.accsoft.steering.jmad.domain.machine.SequenceDefinitionImpl;
import cern.accsoft.steering.jmad.domain.twiss.TwissInitialConditionsImpl;
import cern.accsoft.steering.jmad.factory.BeamFactory;
import cern.accsoft.steering.jmad.kernel.task.AbstractTask;
import cern.accsoft.steering.jmad.kernel.task.CycleSequence;

public class CycleSequenceTest {

	private SequenceDefinition sequenceDefinition;
	private RangeDefinitionImpl rangeDefinition;

	@Before
	public void initRangeDefinition() {
		sequenceDefinition = new SequenceDefinitionImpl("testseq", BeamFactory
				.createDefaultLhcBeam());
		rangeDefinition = new RangeDefinitionImpl(sequenceDefinition, "ALL",
				new TwissInitialConditionsImpl());
	}

	@Test(expected = NullPointerException.class)
	public void testNoRange() {
		AbstractTask task = new CycleSequence(null);
		assertEquals("", task.compose());
	}

	@Test
	public void testNoStartElement() {
		AbstractTask task = new CycleSequence(this.rangeDefinition);
		assertEquals(
				"\n// ***** BEGIN autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****\n"
						+ "// ***** END autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****",
				task.compose());

	}

	@Test
	public void testValidStartElement() {
		this.rangeDefinition.setStartElementName("EXAMPLE.ELEMENT");
		AbstractTask task = new CycleSequence(this.rangeDefinition);
		assertEquals(
				"\n// ***** BEGIN autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****\n"
						+ "seqedit, sequence=testseq;\n"
						+ "flatten;\n"
						+ "cycle, start=EXAMPLE.ELEMENT;\n"
						+ "endedit;\n"
						+ "// ***** END autogenerated task: cern.accsoft.steering.jmad.kernel.task.CycleSequence *****",
				task.compose());
	}
}
